#$cache_size_kb!/bin/bash
#
# Copyright (C) 2022  David Valin dvalin@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

mem_offset=0
stride=0
numa_streams=0
iterations=10
tuned_config="None"
optim=3
optim_opt=""
cache_multiply=2
numb_sizes=4
streams_exec=""
start_at=1
thread_multiply=2
use_cache=""
base_cache_size=""
resultdir=""
cpus_per_node=""
cache_cap_size=0
host=`hostname`
size_list="0"

#
# Define options
#
ARGUMENT_LIST=(
	"cache_cap_size"
	"cache_multiply"
	"cache_start_size"
	"host"
	"iterations"
	"mem_offset"
	"numa_streams"
	"numb_sizes"
	"optimize_lvl"
	"results_dir"
	"size_list"
	"stride"
	"thread_multiply"
)

NO_ARGUMENTS=(
        "usage"
)


# read arguments
opts=$(getopt \
    --longoptions "$(printf "%s:," "${ARGUMENT_LIST[@]}")" \
    --longoptions "$(printf "%s," "${NO_ARGUMENTS[@]}")" \
    --name "$(basename "$0")" \
    --options "h" \
    -- "$@"
)

eval set --$opts

while [[ $# -gt 0 ]]; do
	echo $1 >> /tmp/junk
	case "$1" in
		--cache_cap_size)
			cache_cap_size=${2}
			shift 2
		;;
		--cache_multiply)
			cache_multiply=${2}
			shift 2
		;;
		--cache_start_size)
			ache_start_size=${2}
			shift 2
		;;
		--host)
			host=${2}
			shift 2
		;;
		--iterations)
			iterations=${2}
			shift 2
		;;
		--mem_offset)
			mem_offset=${2}
			shift 2
		;;
		--numa_streams)
			numa_streams=${2}
			shift 2
		;;
		--numb_sizes)
			numb_sizes=${2}
			shift 2
		;;
		--optimize_lvl)
			optim=${2}
			shift 2
		;;
			
		--results_dir)
			echo setting result dir
			resultdir=${2}
			shift 2
		;;
		--size_list)
			size_list=${2}
			shift 2
		;;
		--stride)
			stride=${2}
			shift 2
		;;
		--thread_multiply)
			thread_multiply=${2}
			if [[ $thread_multiply == "1" ]]; then
				echo Thread multiple can not be 1, defaulting to 2
				thread_multiply=2
			fi
			shift 2
		;;
		--usage)
			echo usage to come
			exit
		;;
		--)
			break;
		;;
	esac
done

build_images_straight_streams()
{
	multiple_size=$cache_multiply
	# AARCH64 doesn't support -m64, so only use that for x86_64.
	# If another arch needs it we can tweak this easily enough.
	#
	# We build the streams, 4 sizes, starting at cache size and then going up by multiples $cache_multiply
	#
	dbl_size=`cpp -dD /dev/null | grep __SIZEOF_DOUBLE__ | cut -d' ' -f 3`
	use_cache=`echo ${base_cache_size}*1024 | bc`
	cache_size_kb=`echo ${use_cache}/1024 | bc`
	arch=$(uname -m)
	if [[ "${arch}" == "x86_64" ]]; then
		MOPT="-m64"
	else
		MOPT=""
	fi

        arch=`uname -m`	
	if [[ $size_list == "0" ]]; then
		for test_size  in 1 `seq 2 1 $numb_sizes`;
		do
			stream=stream.${cache_size_kb}k
		
 			if [[ ${cache_cap_size} != 0 ]]; then
 				if [ ${cache_size_kb} -gt ${cache_cap_size} ]; then
 					continue
				fi
 			fi

			if [[ $streams_exec == "" ]]; then
				streams_exec=$stream
			else
				streams_exec=$streams_exec" "$stream
			fi
			echo gcc ${MOPT} -fopenmp  -mcmodel=large ${optim_opt} -DSTREAM_ARRAY_SIZE=${use_cache} stream_omp_5_10.c -o ${stream} -fno-pic >> streams_build_options
			gcc ${MOPT} -fopenmp  -mcmodel=large ${optim_opt} -DSTREAM_ARRAY_SIZE=${use_cache} stream_omp_5_10.c -o ${stream} -fno-pic

			use_cache=`echo ${base_cache_size}*1024*${multiple_size} | bc`
			cache_size_kb=`echo ${use_cache}/1024 | bc`
			multiple_size=`echo ${multiple_size}*${cache_multiply} | bc`
		done
	else
		walk_list=`echo $size_list | sed "s/,/ /g"`
		for test_size in $walk_list; do
			cache_size_kb=`echo "$test_size/1024" | bc`
			stream=stream.${cache_size_kb}k
			if [[ $streams_exec == "" ]]; then
				streams_exec=$stream
			else
				streams_exec=$streams_exec" "$stream
			fi
			echo gcc ${MOPT} -fopenmp  -mcmodel=large ${optim_opt} -DSTREAM_ARRAY_SIZE=${test_size} stream_omp_5_10.c -o ${stream} -fno-pic >> streams_build_options
			gcc ${MOPT} -fopenmp  -mcmodel=large ${optim_opt} -DSTREAM_ARRAY_SIZE=${test_size} stream_omp_5_10.c -o ${stream} -fno-pic
		done
	fi
	echo $streams_exec >> /tmp/dave
}

setup_sizing()
{
	numa_nodes=`lscpu | grep NUMA | grep CPU | wc -l`

	if [ $optim -eq 3 ]; then
		echo Optimization=O3
		optim_opt="-O3"
	else
		echo Optimization=02
		optim_opt="-O2"
	fi
	if [[ $resultdir != "" ]]; then
		resultdir="${resultdir}_${optim_opt}"
		mkdir $resultdir
	fi
	cpus=`lscpu | grep "^CPU(s)" | cut -d: -f 2`
	echo cpus=${cpus}

	cpus_per_node=`echo ${cpus}/${numa_nodes} | bc`

	#
	# Sizing from Pete Rival
	#
	cpu_list=`cat /proc/cpuinfo | grep "processor"| cut -d: -f 2`

	#
	# Some systems have a third-level cache that's not an classic L3 cache but rather a System-Level Cache (SLC).
	# Arm Neoverse-based systems are among these special cases.  At this time that means there's no L3 cache in the
	# sysfs hierarchy.  Unless and until that changes, special case things with hardcoded numbers because there's
	# no good way to tell otherwise.  We'll want to revisit this if more systems with different-sized SLCs arrive.
	#

	if [ -f /sys/devices/system/cpu/cpu0/cache/index3/shared_cpu_list ]; then
		top_level_caches=`cat /sys/devices/system/cpu/cpu*/cache/index3/shared_cpu_list |sort | uniq |wc -l`
		base_cache_size=`cat /sys/devices/system/cpu/cpu0/cache/index*/size | sed -e s/K// -e s/M// | sort -n | tail -1`
	else
		#
		# Neoverse systems have a 32MB SLC that is not exposed properly.  Work around that here.
		#
		top_level_caches=$numa_nodes
		base_cache_size=$(( 32768 * numa_nodes ))
	fi
	base_cache_size=`echo "${base_cache_size} * ${start_at}" | bc`
}

run_old_streams()
{
	numb_threads=$cpus_per_node
	#
	# Now socket combinations, we start with socket 0 and 1 and continue from there.
	#

	echo Host: $host
	echo Opt_lvl: $optim
	echo numa_nodes $numa_nodes
	for sockets_add in 1 `seq 2 1 ${numa_nodes}`
	do
		worker=`echo ${numb_threads}*${sockets_add} | bc`
		export OMP_NUM_THREADS=$worker
		for iteration in 0 `seq 1 1 ${iterations}`
		do
			for stream_size in $streams_exec
				do
					echo run $stream_size >> /tmp/dave
					cpus=""
					cpu_numa=`lscpu | grep "NUMA node" | grep CPU | cut -d: -f 2 | sed "s/ //g"`
					for cpus_add in $cpu_numa; do
						cpus=${cpus}${cpus_add}
						echo Running on cpus: $cpus
						export GOMP_CPU_AFFINITY=$cpus
						total_sockets=$[$sockets_add]
						if [[ $resultdir != "" ]]; then
							lscpu >> ${resultdir}/${stream_size}.out.threads_${OMP_NUM_THREADS}.numb_sockets_${total_sockets}_iter_${iteration}
							echo GOMP_CPU_AFFINITY: $cpus >> ${resultdir}/${stream_size}.out.threads_${OMP_NUM_THREADS}.numb_sockets_${total_sockets}_iter_${iteration}
							./${stream_size} >> ${resultdir}/${stream_size}.out.threads_${OMP_NUM_THREADS}.numb_sockets_${total_sockets}_iter_${iteration}
						else
							lscpu
							./${stream_size}
							echo GOMP_CPU_AFFINITY: $cpus
	
						fi
						cpus=${cpus}","
				done
			done
		done
	done
}

install_new_streams()
{
	dnf install -y numactl-libs.x86_64
	dnf install -y numactl-devel.x86_64
	git clone https://github.com/larsbergstrom/NUMA-STREAM
	cd NUMA-STREAM
	mkdir ../numactl-2.0.7-rc2
	pushd ../numactl-2.0.7-rc2
	ln -s /usr/include/numa.h
	popd
	sed "s/numa_max_node();/numa_max_node() + 1;"/g < stream-pthreads.c > temp
	mv temp stream-pthreads.c
}

numa_stride()
{
   echo gcc -O2 -std=c99 -lpthread -lnuma -L ../numactl-2.0.7-rc2 -DNTIMES=${iterations} -DNUM_THREADS=$1 -DMEM_OFF=$2 -DN=$3 -DSTRIDE=1 stream-pthreads.c >> /tmp/debug
   gcc -O2 -std=c99 -lpthread -lnuma -L ../numactl-2.0.7-rc2 -DNTIMES=${iterations} -DNUM_THREADS=$1 -DMEM_OFF=$2 -DN=$3 -DSTRIDE=1 stream-pthreads.c
  ./a.out > stride_mem=${2}_threads=$1_cache=${4}kb_iterations=${iterations}
}

run_numa_test()
{
	if [ $stride -eq 0 ] || [ $stride -eq 2 ]]; then
		echo gcc -O2 -std=c99 -lpthread -lnuma -L ../numactl-2.0.7-rc2 -DNTIMES=${iterations} -DNUM_THREADS=$1 -DMEM_OFF=$2 -DN=$3 stream-pthreads.c >> /tmp/debug
		gcc -O2 -std=c99 -lpthread -lnuma -L ../numactl-2.0.7-rc2 -DNTIMES=${iterations} -DNUM_THREADS=$1 -DMEM_OFF=$2 -DN=$3 stream-pthreads.c
		./a.out > no_stride_mem=${2}_threads=$1_cache=${4}kb_iterations=${iterations}
	fi
	if [ $stride -gt 0 ]; then
		numa_stride $1 $2 $3 $4
	fi
}

execute_numa_test()
{
	if [ $mem_offset -eq 0 ] || [ $mem_offset -eq 2 ]; then
		run_numa_test $1 0 $2 $3
	fi
	if [ $mem_offset -gt 0 ]; then
		run_numa_test $1 1 $2 $3
	fi
}


create_numa_cache_list()
{
	multiple_size=$cache_multiply
	use_cache=$base_cache_size
	cache_size_kb=`echo ${use_cache}/1024 | bc`
	for test_size  in 1 `seq 2 1 $numb_sizes`;
	do
		if [[ ${cache_cap_size} != 0 ]]; then
			if [ ${cache_size_kb} -gt ${cache_cap_size} ]; then
				continue
			fi
		fi

		if [[ $streams_exec == "" ]]; then
			streams_exec=$stream
		else
			streams_exec=$streams_exec" "$stream
		fi
		execute_numa_test $1 $2 $use_cache $cache_size_kb
		use_cache=`echo ${base_cache_size}*${multiple_size} | bc`
		cache_size_kb=`echo ${use_cache}/1024 | bc`
		multiple_size=`echo ${multiple_size}*${cache_multiply} | bc`
	done
}

record_numa_stream()
{
	value=`grep ${1} *stride* | awk '{print $2}' |sort -n | tail -1`
	echo ${1}:${value} >> highest.csv
}


run_new_streams()
{
	cpus=`cat /proc/cpuinfo | grep processor | wc -l`
	threads=1

#	while [ $threads -lt $cpus ]
#	do
#		execute_numa_test $threads $base_cache_size
#		threads=`echo "${threads}*2" | bc`
#	done
	create_numa_cache_list $cpus

	#
	# Record highest
	#
	echo Test:MB/sec > highest.csv

	record_numa_stream Read
	record_numa_stream Copy
	record_numa_stream Scale
	record_numa_stream Add
	record_numa_stream Triad
	rm -rf /tmp/results_numa_streams
	mkdir /tmp/results_numa_streams
	cp *stride* /tmp/results_numa_streams
	cp *csv /tmp/results_numa_streams
}

setup_sizing
if [ $numa_streams -eq 0 ]; then
	build_images_straight_streams
	run_old_streams
else
	base_cache_size=`echo "${base_cache_size}*1024" | bc`
	install_new_streams
	run_new_streams
fi
